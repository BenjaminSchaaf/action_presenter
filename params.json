{"google":"","body":"# ActionPresenter [![Build Status](https://secure.travis-ci.org/zlw/action_presenter.png?branch=master)](http://travis-ci.org/zlw/action_presenter)\r\n\r\nMissing link between models and views.\r\nUse presenter pattern in Rails application without changing controllers.\r\n\r\n**Based on *'Presenters from Scratch'* by Ryan Bates.**\r\n\r\n## Installation\r\n\r\n**Add `action_presenter` to Gemfile**\r\n\r\n```ruby\r\ngem 'action_presenter'\r\n# or\r\ngem 'action_presenter', git: 'git@github.com:zlw/action_presenter.git'\r\n```\r\n\r\n**and than install**\r\n\r\n```bash\r\n# for RSpec\r\nrails generate action_presenter:intall -t rspec\r\n\r\n# for Test::Unit\r\nrails generate action_presenter:install -t test_unit\r\n```\r\n\r\nGem was tested under Ruby 1.9.2 and 1.9.3, Rails 3.2.1\r\n\r\n## Usage\r\n\r\n### Creating presenter class\r\n\r\n```ruby\r\n# /app/presenters/post_presenter.rb\r\nclass PostPresenter < ActionPresenter::Base\r\n  presents :post\r\n\r\n  def title\r\n    link_to_unless_current post.title, post_path(post), class: :post_title_link\r\n  end\r\n\r\n  def content\r\n    content_tag :pre, post.content\r\n  end\r\nend\r\n```\r\n\r\nYou can use all view helpers without any changes. Reference to model by method with the name passed to `presents` class method.\r\n\r\n### Calling presenter\r\n\r\n```haml\r\n# /app/views/posts/index.html.haml\r\n- present @post do |p|\r\n  = p.title\r\n  = p.content\r\n```\r\n\r\nIt will call (by default) `PostPresenter` (assuming that @post variable is instance of Post class)\r\n\r\nThere are some ways to change default presenter class\r\n\r\n#### 1. Pass class as second argument\r\n\r\n```ruby\r\npresent @post, ArticlePresenter\r\n```\r\n\r\nIt will call `ArticlePresenter` class\r\n\r\n#### 2. Scope variable\r\n\r\n```ruby\r\npresent [:admin, @post]\r\n```\r\n\r\nIt will call `Admin::PostPresenter` class\r\n\r\n**Please, keep in mind, that passing presenter class has higher priority than scope:**\r\n\r\n```ruby\r\npresent [:admin, @post], ArticlePresenter\r\n```\r\n\r\n**It will also call `ArticlePresenter` class**\r\n\r\n## Defaults\r\n\r\nThere're some default presenter methods. They're generated if object respond to those methods\r\n\r\n### `created_at` and `updated_at`\r\n\r\n```haml\r\n- present @article do |p|\r\n = p.created_at #=> \"February 17, 2012 12:30\"\r\n = p.updated_at #=> \"February 17, 2012 13:27\"\r\n```\r\n\r\nIt's also possible to change timestamps format\r\n\r\n```haml\r\n- present @article do |p|\r\n  = p.created_at :short\r\n  = p.updated_at :long\r\n```\r\n\r\n## Utilities\r\n\r\n### Let\r\n\r\nThere's RSpec inspired way to define methods\r\n\r\n```ruby\r\nclass ArticlePresenter < ActionPresenter::Base\r\n  presents :article\r\n\r\n  let(:link_to_title) { link_to_unless_current article.title, article_path(article) }\r\n\r\n  let(:render_article) do\r\n    html = ''.html_safe\r\n\r\n    html += content_tag :h1, article.title\r\n    html += content_tag :p, article.content\r\n\r\n    html\r\n  end\r\nend\r\n```\r\n\r\n## Testing\r\n\r\n### RSpec\r\n\r\n```ruby\r\nrequire 'spec_helper'\r\n\r\ndescribe ArticlePresenter do\r\n  include ActionView::TestCase::Behavior\r\n\r\n  let(:article) { mock_model(Article) }\r\n  let(:presenter) { ArticlePresenter.new(article, view) }\r\nend\r\n```\r\n\r\nYou can change RSpec configuration to include `ActionView::TestCase::Behavior` in all specs in `/spec/presenters` folder\r\n\r\n```ruby\r\nRSpec.configure do |config|\r\n  # a lot of code here ...\r\n\r\n  config.include ActionView::TestCase::Behavior, example_group: { file_path: %r{spec/presenters} }\r\nend\r\n```\r\n\r\n### Test::Unit\r\n\r\n```ruby\r\nrequire 'test_helper'\r\n\r\nclass TestArticlePresenter < ActionView::TestCase\r\nend\r\n```\r\n\r\n## Feature requests, contributing to project\r\n\r\nWell, I am not sitting all day and thinking about fancy stuff that I could add to action_presenter. \r\nEverytime I need something I add this to my current project, than extract it to this gem and release a new version.\r\n\r\nIf you need something - please create an issue with feature request or, wchich is more welcome (my time is also limited), send pull request.\r\n\r\nAlso if you something is missing/broken, please do not think `Man, this gem sucks and its author is shitty coder` and no longer use it! Let me know about it - create an issue or send patch.\r\n\r\n## Maintainers\r\n\r\n* Krzysztof Zalewski (https://github.com/zlw, http://kzalewski.blogspot.com)\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Krzysztof Zalewski\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Missing link between models and views. Use presenter pattern in Rails application without changing controllers.  ","name":"Action presenter"}